generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id              Int                  @id @default(autoincrement())
  platform        VideoPlatform
  videoId         String               @unique
  title           String
  description     String?
  url             String?
  thumbnailUrl    String?
  channelTitle    String?
  channelUrl      String?
  transcript      String?
  status          VideoStatus          @default(DRAFT)
  isHowToVWVideo  Boolean              @default(false)
  categories      CategoriesOnVideos[]
  vwTypes         VWTypesOnVideos[]
  tags            TagsOnVideos[]
  slug            String?              @unique
  processingError String?
  sourceKeyword   String?
  processedAt     DateTime?
  popularityScore Float?
  publishedAt     DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model Category {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  description String?
  slug        String?              @unique
  sortOrder   Int                  @default(0)
  videos      CategoriesOnVideos[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model VWType {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  slug        String            @unique
  description String?
  sortOrder   Int               @default(0)
  videos      VWTypesOnVideos[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Tag {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  slug        String         @unique
  description String?
  videos      TagsOnVideos[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CategoriesOnVideos {
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([videoId, categoryId])
}

// New Join Table for Videos and VWTypes
model VWTypesOnVideos {
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  vwType     VWType   @relation(fields: [vwTypeId], references: [id], onDelete: Cascade)
  vwTypeId   Int
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([videoId, vwTypeId])
}

// New Join Table for Videos and Tags
model TagsOnVideos {
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      Int
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([videoId, tagId])
}

enum VideoStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  REJECTED
  UNAVAILABLE
}

enum VideoPlatform {
  YOUTUBE
  VIMEO
}

model SearchLog {
  id               Int      @id @default(autoincrement())
  term             String
  partialIpAddress String?
  resultsCount     Int
  createdAt        DateTime @default(now())

  @@index([createdAt])
  @@index([term])
}
