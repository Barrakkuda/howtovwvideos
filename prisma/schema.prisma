generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id              Int                  @id @default(autoincrement())
  platform        VideoPlatform
  videoId         String               @unique
  title           String
  description     String?
  url             String?
  thumbnailUrl    String?
  transcript      String?
  status          VideoStatus          @default(DRAFT)
  isHowToVWVideo  Boolean              @default(false)
  categories      CategoriesOnVideos[]
  vwTypes         VWTypesOnVideos[]
  tags            TagsOnVideos[]
  slug            String?              @unique
  processingError String?
  sourceKeyword   String?
  processedAt     DateTime?
  popularityScore Float?
  publishedAt     DateTime?

  channelId Int?
  channel   Channel? @relation(fields: [channelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  description String?
  slug        String?              @unique
  sortOrder   Int                  @default(0)
  videos      CategoriesOnVideos[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model VWType {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  slug        String            @unique
  description String?
  sortOrder   Int               @default(0)
  videos      VWTypesOnVideos[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Tag {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  slug        String         @unique
  description String?
  videos      TagsOnVideos[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CategoriesOnVideos {
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([videoId, categoryId])
}

// New Join Table for Videos and VWTypes
model VWTypesOnVideos {
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  vwType     VWType   @relation(fields: [vwTypeId], references: [id], onDelete: Cascade)
  vwTypeId   Int
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([videoId, vwTypeId])
}

// New Join Table for Videos and Tags
model TagsOnVideos {
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      Int
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([videoId, tagId])
}

enum VideoStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  REJECTED
  UNAVAILABLE
}

enum VideoPlatform {
  YOUTUBE
  VIMEO
}

model SearchLog {
  id               Int      @id @default(autoincrement())
  term             String
  partialIpAddress String?
  resultsCount     Int
  createdAt        DateTime @default(now())

  @@index([createdAt])
  @@index([term])
}

// New Channel Model
model Channel {
  id                Int           @id @default(autoincrement())
  platformChannelId String // ID from the platform (e.g. YouTube channel ID)
  platform          VideoPlatform // To distinguish between YouTube, Vimeo channels etc.
  name              String
  url               String // URL to the channel page
  description       String?
  thumbnailUrl      String?
  customUrl         String? // Optional custom URL (e.g. youtube.com/c/ChannelName)
  country           String? // Optional channel country

  videoCount      Int?    @default(0)
  subscriberCount Int?    @default(0)
  viewCount       BigInt? @default(0) // Channel total views can be large

  publishedAt DateTime? // Channel creation/publication date

  videos Video[] // Relation to videos this channel has

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, platformChannelId]) // Ensure platform-specific channel ID is unique per platform
  @@index([name])
  @@index([platformChannelId])
}
